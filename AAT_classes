import tkinter as tk                                              # stuff for gui
import tkinter.font as font                                       # stuff for fonts
import sqlite3                                                     # stuff for database


# ================== SALES STAFF (F4) - DATABASE CLASSES ====================== #
class DataBase(object):
    def __init__(self, file_name):
        self.file = file_name
        self.conn = sqlite3.connect(self.file)
        self.c = self.conn.cursor()


class ReviewsDataBase(DataBase):
    def __init__(self, file_name):
        DataBase.__init__(self, file_name)

    def create_list(self, listbox):       # inserts username of reviewers from database into the listbox
        self.c.execute("SELECT Name FROM cust_review")
        usernames = self.c.fetchall()
        self.conn.commit()
        self.conn.close()
        for user in usernames:
            for i in user:
                listbox.insert(0, i)

    def show_review(self, name, textbox):
        self.c.execute("SELECT Review FROM cust_review WHERE Name = :Name",
                       {
                           'Name': name
                       })
        review = self.c.fetchall()
        self.conn.commit()
        self.conn.close()
        textbox.insert(1.0, review)


class QueriesDataBase(DataBase):
    def __init__(self, file_name):
        DataBase.__init__(self, file_name)

    def create_list(self, listbox):      # inserts username of customers from database into the listbox
        self.c.execute("SELECT Name FROM cust_query")
        usernames = self.c.fetchall()
        self.conn.commit()
        self.conn.close()
        for user in usernames:
            for i in user:
                listbox.insert(0, i)

    def show_query(self, name, textbox):
        self.c.execute("SELECT Query FROM cust_query WHERE Name = :Name",
                       {
                           'Name': name
                       })
        query = self.c.fetchall()
        self.conn.commit()
        self.conn.close()
        textbox.insert(1.0, query)


class ResponsesDataBase(DataBase):
    def __init__(self, file_name):
        DataBase.__init__(self, file_name)

    def submit_comm(self, communication_id, response):
        self.c.execute("INSERT INTO responses VALUES (:communication_id, :response)",
                       {
                           'communication_id': communication_id,
                           'response': response
                       })
        self.conn.commit()
        self.conn.close()

    def edit(self, communication_id, textbox):
        self.c.execute("SELECT responses FROM responses WHERE communications = :communication_id",
                       {
                           'communication_id': communication_id
                       })
        last_response = self.c.fetchall()
        self.conn.commit()
        self.conn.close()
        textbox.insert(1.0, last_response)

    def update(self, response, communication_id):
        self.c.execute("""UPDATE responses SET responses = :response WHERE communications = :communication_id""",
                       {
                           'response': response,
                           'communication_id': communication_id
                       })
        self.conn.commit()
        self.conn.close()

    def delete_item(self, communication_id):
        self.c.execute("DELETE FROM responses WHERE communications = :communication_id",
                       {
                           'communication_id': communication_id
                       })
        self.conn.commit()
        self.conn.close()

    def delete_all(self):
        self.c.execute("DELETE FROM responses")
        self.conn.commit()
        self.conn.close()


class DiscountsDataBase(DataBase):
    def __init__(self, file_name):
        DataBase.__init__(self, file_name)

    def create_list(self, listbox):  # inserts schemes from database into the listbox
        self.c.execute("SELECT scheme_id FROM discount_schemes")
        scheme_ids = self.c.fetchall()
        self.conn.commit()
        self.conn.close()
        for scheme in scheme_ids:
            for i in scheme:
                listbox.insert(0, i)

    def submit_ds(self, scheme_id, details, product_category):
        self.c.execute("INSERT INTO discount_schemes VALUES (:scheme_id, :details, :product_category)",
                       {
                           'scheme_id': scheme_id,
                           'details': details,
                           'product_category': product_category
                       })
        self.conn.commit()
        self.conn.close()

    def edit(self, scheme_id, textbox):
        self.c.execute("SELECT details FROM discount_schemes WHERE scheme_id = :scheme_id",
                       {
                           'scheme_id': scheme_id
                       })
        last_edit = self.c.fetchall()
        self.conn.commit()
        self.conn.close()
        textbox.insert(1.0, last_edit)

    def update(self, details, product_category, scheme_id):
        self.c.execute("""UPDATE discount_schemes SET
                                details = :details,
                                product_category = :product_category
                                WHERE scheme_id = :scheme_id""",
                       {
                           'details': details,
                           'product_category': product_category,
                           'scheme_id': scheme_id
                       })
        self.conn.commit()
        self.conn.close()

    def delete_item(self, scheme_id):
        self.c.execute("DELETE FROM discount_schemes WHERE scheme_id = :scheme_id",
                       {
                           'scheme_id': scheme_id
                       })
        self.conn.commit()
        self.conn.close()

    def delete_all(self):
        self.c.execute("DELETE FROM discount_schemes")
        self.conn.commit()
        self.conn.close()


class AdminLoginDataBase(DataBase):
    def __init__(self, file_name):
        DataBase.__init__(self, file_name)

    def select(self, username):
        self.c.execute("SELECT * FROM admin_users WHERE username=?", (username,))
        admin_users = self.c.fetchall()  # returns all the rows as a list of tuples
        self.conn.commit()
        self.conn.close()
        return admin_users


class StaffLoginDataBase(DataBase):
    def __init__(self, file_name):
        DataBase.__init__(self, file_name)

    def select(self, username):
        self.c.execute("SELECT * FROM staff_credentials WHERE username=?", (username,))
        staff_credentials = self.c.fetchall()  # returns all the rows as a list of tuples
        self.conn.commit()
        self.conn.close()
        return staff_credentials


# ============================ SALES STAFF (F4) - GUI CLASSES =============================== #
class Window:
    def __init__(self, root, title, background, width, height):
        self.root = root
        self.root.title(title)  # sets title of window
        self.root.configure(bg=background)  # sets background color
        self.root.width, self.root.height = width, height  # give measures of the window
        self.root.winfo_screenwidth()   # gets screen width info
        self.root.winfo_screenheight()  # gets screen height info

    def center_window(self):
        """
        This centres the window when it is not maximised.  It
        uses the screen and window height and width variables
        defined in the program below.
        """
        x_cord = int((self.root.winfo_screenwidth() / 2) - (self.root.width / 2))
        y_cord = int((self.root.winfo_screenheight() / 2) - (self.root.height / 2))
        self.root.geometry("{}x{}+{}+{}".format(self.root.width, self.root.height, x_cord, y_cord))


class Frame(tk.Frame):
    def __init__(self, parent, background, relwidth, relheight):
        tk.Frame.__init__(self, parent, bg=background)
        self.relw = relwidth
        self.relh = relheight
        self.place(relwidth=self.relw, relheight=self.relh)

    def show(self):
        """
        This function shows a frame.
        :return: Nothing
        """
        self.tkraise()

    def clear_frame(self):                    # clears frame by destroying widgets
        for widget in self.winfo_children():
            widget.destroy()


class Font(font.Font):
    def __init__(self, family, size, weight, underline):
        font.Font.__init__(self, family=family, size=size, weight=weight, underline=underline)


class Label(tk.Label):
    def __init__(self, frame, text, font, background, foreground, relx, rely, relwidth, relheight):
        tk.Label.__init__(self, frame, text=text, font=font, bg=background, fg=foreground)
        self.relx = relx
        self.rely = rely
        self.relw = relwidth
        self.relh = relheight
        self.place(relx=self.relx, rely=self.rely, relwidth=self.relw, relheight=self.relh)


class Entry(tk.Entry):
    def __init__(self, frame, font, show, relx, rely):
        tk.Entry.__init__(self, frame, font=font, show=show)
        self.relx = relx
        self.rely = rely
        self.place(relx=self.relx, rely=self.rely)

    def get_text(self):
        return self.get()

    def cancel(self):
        self.delete(0, tk.END)


class Button(tk.Button):
    def __init__(self, frame, text, foreground, background, command, relx, rely):
        tk.Button.__init__(self, frame, text=text, fg=foreground, bg=background, command=command)
        self.relx = relx
        self.rely = rely
        self.place(relx=self.relx, rely=self.rely)


class CheckButton(tk.Checkbutton):
    def __init__(self, frame, text, background, relx, rely):
        var = tk.StringVar()
        self.var = var
        tk.Checkbutton.__init__(self, frame, text=text, bg=background, var=self.var, onvalue=text, offvalue='')
        self.relx = relx
        self.rely = rely
        self.place(relx=self.relx, rely=self.rely)
        self.uncheck()

    def uncheck(self):
        self.deselect()


class ListBox(tk.Listbox):
    def __init__(self, frame, relx, rely):
        tk.Listbox.__init__(self, frame, selectmode=tk.EXTENDED)
        self.relx = relx
        self.rely = rely
        self.place(relx=self.relx, rely=self.rely)

    def delete_item(self):
        self.delete(tk.ANCHOR)

    def delete_list(self):
        self.delete(0, tk.END)

    def add(self, item):
        self.insert(tk.END, item)


class TextBox(tk.Text):
    def __init__(self, frame, width, height, font, relx, rely):
        tk.Text.__init__(self, frame, width=width, height=height, font=font)
        self.relx = relx
        self.rely = rely
        self.place(relx=self.relx, rely=self.rely)

    def cancel(self):
        self.delete(1.0, tk.END)

    def get_text(self):
        return self.get(1.0, tk.END)


class Menu(tk.Menu):
    def __init__(self, root):
        tk.Menu.__init__(self, root)
        self.root = root
        self.root.config(menu=self)

    def add_menu(self, label, command):
        self.add_cascade(label=label, command=command)


# =============== ADMINISTRATION (F1) - CLASSES FOR CATEGORIES FRAME ======================= #
class ScrollBar(tk.Scrollbar):
    def __init__(self, frame, orient, command, side, fill):
        tk.Scrollbar.__init__(self, frame, orient=orient, command=command)
        self.side = side
        self.fill = fill
        self.pack(side=self.side, fill=self.fill)









